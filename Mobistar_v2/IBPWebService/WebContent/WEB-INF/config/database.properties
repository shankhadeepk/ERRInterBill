##################################################################
#
# Standard Data Source Properties
#
# These properties are described in JDBC 3.0 specification
# (see jdbc-3_0-fr-spec.pdf chapter 9.4.1) and in Oracle
# "JDBC Developer's Guide and Reference" see chapter 16, table 16-1
# (avaliable, for example, here:
# http://otn.oracle.com/docs/products/oracle9i/doc_library/release2/java.920/a96654/connpoca.htm#1056515)
#
# (Be aware, however, that Oracle does not implement the standard roleName property.)
##################################################################

#
# Name of the particular database on the server; also
# known as the "SID" in Oracle terminology.
# Required when driverType=thin
# Ignored when driverType=oci
#
BSCS_databaseName=i2mbc51

#
# number of the port where the database server listens for requests.
# Required when driverType=thin
# Ignored when driverType=oci
#
BSCS_portNumber=1763

#
# name of the database server.
# Required when driverType=thin
# Ignored when driverType=oci
#
BSCS_serverName=lena.lhs-systems.com

#
# User and Password
#
BSCS_user=SYSADM
BSCS_password=SYSADM

#
# Network protocol for communicating with the server; for
# Oracle, this applies only to the OCI drivers and defaults
# to tcp.
# (Other possible settings include ipc. See the Oracle Net
# Services Administrator’s Guide for more information.)
# Required when driverType=thin
# Ignored when driverType=oci
#
BSCS_networkProtocol=tcp

#
# This designates the Oracle JDBC driver type as either oci,
# thin, or kprb (server-side internal).
#
BSCS_driverType=thin

#
# Name of the underlying data source class (for connection
# pooling, this is an underlying pooled connection data
# source class; for distributed transactions, this is an
# underlying XA data source class)
# Ignored when driverType=oci
#
BSCS_dataSourceName=

#
# Description of the data source
# Ignored when driverType=oci
#
BSCS_description=

##################################################################
#
# Oracle Extended Data Source Properties
#
# These properties are described in Oracle documentation
# "JDBC Developer's Guide and Reference" see chapter 16, Table 16-2
# (avaliable, for example, here:
# http://otn.oracle.com/docs/products/oracle9i/doc_library/release2/java.920/a96654/connpoca.htm#1056515)
#
##################################################################

#
# This is the TNS entry name, relevant only for the OCI driver.
# It assumes an Oracle client installation with a TNS_ADMIN
# environment variable that is set appropriately.
# Enable this OracleXADataSource property when using
# the HeteroRM feature with the OCI driver, to access Oracle
# pre-8.1.6 databases and higher. The HeteroRM XA feature is
# described in "OCI HeteroRM XA" on page 17-19. If the
# tnsEntry property is not set when using the HeteroRM XA
# feature, an SQLException with error code ORA-17207 is
# thrown.
#
# If the tnsEntry property is set (which presumes the url property is not set),
# then any databaseName, serverName, portNumber, and
# networkProtocol settings are ignored.
#
# tnsEntry=

#
# This is the URL of the database connect string. Provided as a
# convenience, it can help you migrate from an older Oracle
# database. You can use this property in place of the Oracle
# tnsEntry and driverType properties and the standard
# portNumber, networkProtocol, serverName, and
# databaseName properties.
#
# If the url property is set, then any tnsEntry, driverType, portNumber,
# networkProtocol, serverName, and databaseName property settings are
# ignored.
#
# Examples:
# url=jdbc:oracle:thin:scott/tiger@localhost:1521:orcl
# url=jdbc:oracle:thin:sysadm/sysadm@hamburg.frankfurt.eur.slb.com:1648:c3pci700

#
# Enable this OracleXADataSource property when using
# the HeteroRM feature with the OCI driver, to access Oracle
# pre-8.1.6 databases and higher. The HeteroRM XA feature is
# described in "OCI HeteroRM XA" on page 17-19. If the
# nativeXA property is enabled, be sure to set the tnsEntry
# property as well.
#
# nativeXA=

##################################################################
# Properties of OracleDataSource class
##################################################################

#
# Enables or disables the explicit cache of prepared statements.
# Note that this is independent of the cache size, set with
# MaxStatementsLimit.
#
BSCS_explicitCachingEnabled=false

#
# Enables or disables the implicit cache of prepared statements.
# Note that this is independent of the cache size, set with MaxStatementsLimit.
#
BSCS_implicitCachingEnabled=true

##########################################################################
# Properties of OracleDataSource related to implicit connection caching
##########################################################################

#
# Sets the maximum number of statements that a connection keeps open
# (which will be used by both implicit and explicit caching).
# When a cache has this property set, reinitializing the cache or closing the
# data source automatically closes all cursors beyond the specified MaxStatementsLimit.
#
# 0 - means disabled
#
# See also: explicitCachingEnabled, implicitCachingEnabled, shouldBindAllParameters
#
# This property MUST be set to some not 0 value when shouldBindAllParameters=true
#
BSCS_MaxStatementsLimit=50

#
# Sets the minimum number of connections the cache maintains.
# This guarantees that the cache will not shrink below this minimum limit.
#
# NOTE:
# Setting the MinLimit property does not initialize the cache to contain the
# minimum number of connections. To do this, use the InitialLimit property.
#
BSCS_MinLimit=2

#
# Sets how many connections are created in the cache when it is created or
# reinitialized. When this property is set to an integer value greater than 0,
# creating or reinitializing the cache automatically creates the specified
# number of connections, filling the cache in advance of need.
#
BSCS_InitialLimit=2

#
# Sets the maximum number of connection instances the cache can hold. The default
# value is Integer.MAX_VALUE, meaning that there is no limit enforced by the
# connection cache, so that the number of connections is limited only by the
# number of database sessions configured for the database.
#
BSCS_MaxLimit=35

#
# Sets the maximum time a physical connection can remain idle in a connection cache.
# An idle connection is one that is not active and does not have a logical handle
# associated with it. When InactivityTimeout expires, the underlying physical
# connection is closed. However, the size of the cache is not allowed to shrink below
# MinLimit, if it has been set.
# Default: 0 (no timeout in effect)
#
BSCS_InactivityTimeout=0

#
# Sets the maximum time in seconds that a logical connection can remain open.
# When TimeToLiveTimeout expires, the logical connection is unconditionally closed,
# the relevant statement handles are canceled, and the underlying physical connection
# is returned to the cache for reuse.
# Default value: 0 (no timeout in effect)
#
BSCS_TimeToLiveTimeout=0

#
# Specifies cache behavior when a connection is requested and there are already MaxLimit
# connections active. If ConnectionWaitTimeout is greater than zero, then each connection
# request waits for the specified number of seconds or until a connection is returned to
# the cache. If no connection is returned to the cache before the timeout elapses, then
# the connection request returns null. A value of 0 will never block and will return no connection
# in case MaxLimit connections are already active. That can result in null pointer exceptions in 
# TOPLink. Therefore a default is set, that is beyond the session timeout.
# The value is the timeout in seconds.
#
BSCS_ConnectionWaitTimeout=3600

##################################################################
#
# TopLink properties
# See TopLink API: http://otndnld.oracle.co.jp/document/products/as10g/1013/doc_cd/web.1013/b13698/index.html
#
##################################################################

#
# Set whether to bind all arguments to any SQL statement. (Parameterized SQL)
# TopLink API: DatabaseLogin.setShouldBindAllParameters
#
# When set to "true" then "MaxStatementsLimit"  must be set to some not 0 value;
# see also "explicitCachingEnabled", "implicitCachingEnabled"
#
# When set to "false" then "MaxStatementsLimit", "explicitCachingEnabled", "implicitCachingEnabled"
# are ingnored
#
BSCS_shouldBindAllParameters=true

#
# Set whether to bind LIKE predicates in searches.
# This is not a TOPLink API, but changes the behavior if shouldBindAllParameters is set to true.
#
# When set to "true"  LIKE predicates do not use bind variables for SEARCH commands, that are
#  configurable via XML.
# When set to "false" LIKE predicates use bind variables, this is the default setting.
# This switch is usefull for such database, where LIKE predicates with binding produce bad execution plan
 # compared to not binding. This can happen due to the bind variable peeking that Oracle performs and depending on the
# distribution/selectivity of data.
#
BSCS_shouldNotBindLikeInSearch=false

#
# TopLink can be configured to use batch writing. This facility allows
# multiple write operations to be submitted to a database for processing at once.
# Submitting multiple updates and inserts together, instead of individually,
# can greatly improve performance in some situations.
# Since TOPLink 10.1.3 it can be combined with binding parameters as well.
# TopLink API: DatabaseLogin.setUsesBatchWriting
#
BSCS_usesBatchWriting=false

##################################################################
#
# Logging on JDBC driver level
#
##################################################################

#
# The following parameter controls logging of database activity on the
# JDBC driver level. When this parameter is set to 'on' then the
# whole communication stream between database and server will be written
# in the file specified in the 'jdbcdriver.logfile'.
#
# Prerequisite: debug version of the Oracle JDBC driver (e.g. ojdbc14_g.jar) 
# should be used instead of production version (e.g. ojdbc14.jar).
#
# For configuring the log level, additional settings must be provided in the
# 'logging.properties' file. Following loggers are used by the JDBC driver
# and can be configured separately in this file:
#  
# oracle.jdbc 			(almost all Oracle JDBC messages)
# oracle.jdbc.driver 	(the core driver code)
# oracle.jdbc.pool 		(DataSources and Connection pooling)
# oracle.jdbc.rowset 	(RowSets)
# oracle.jdbc.xa 		(distributed transaction support)
# oracle.sql 			(complex SQL data types)
#
# Per default the log will be contained in the file specified below. Additionally
# further handlers could be added in the 'logging.properties' file.
#
# Use carefully since it produces a lot of output, that affects overall 
# system performance.
#
# Possible values: on/off
BSCS_jdbcdriver.log=off

#
# Name of the JDBC logfile. Must be specified if JDBC log is enabled.
#
BSCS_jdbcdriver.logfile=jdbcdriver.log


# Required for Oracle 10.2.X.X JDBC drivers
#
BSCS_oracle.jdbc.V8Compatible=true

# For login, per default a login causes to open a new database connection with the given credentials (user/password).
# That could lead to scalability problems if many user perform a login concurrently. Therefore the Oracle feature
#  proxy session is introduced. Instead of opening a new connection, a connection from the pool is used which acts as
#  a proxy session with the given credentials beeing opened on top of it.
#  If the session can be established the session is closed again and the connection is released back to the connection pool.
# Default : false
# Possile values : true/false
#
# NOTE : When setting this paramter to true, users that login  to a SOI must be modified to be able to use the proxy mechanism !
#              For details see the database part of PN 00302859 which introduces solutions for existing user migration and new users
#              creation. Moreover the BSCS password of the  standard SOIUSER needs to be set below.
BSCS_useProxySessionForLogin=false

# In case the proxy session feature is turned on, the password for the user SOIUSER is needed, in case a user login has failed.
# In this case a proxy session is opened on the same connection with the user SOIUSER, otherwise the connection would be in
# the state "not logged on". The password "SOI" is assumed, but can be overwritten here.
# Note, this is the cleartext password, not the password that can be used to connect to the database. The cleartext password is
# encrypted before connecting to the database.
# Default : SOI
BSCS_soiUserPassword=SOI
